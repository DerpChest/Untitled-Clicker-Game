{
  "author": "arthuro555 for the adaptation for GDevelop, MausGames for the Base Basic JS api wrapper.",
  "description": "An interface to the Gamejolt API. Execute InitGamejoltAPI once on initialisation of the game.",
  "extensionNamespace": "",
  "fullName": "Gamejolt API",
  "helpPath": "",
  "iconUrl": "",
  "name": "Gamejolt",
  "previewIconUrl": "",
  "shortDescription": "An interface to the Gamejolt API.",
  "version": "0.0.2",
  "tags": [
    "gamejolt",
    "api",
    "multiplayer"
  ],
  "dependencies": [],
  "eventsFunctions": [
    {
      "description": "Execute this function ONLY ONCE and BEFORE USING ANY OTHER GAMEJOLT FUNCTION.",
      "fullName": "Gamejolt init",
      "functionType": "Action",
      "name": "InitGamejoltAPI",
      "private": false,
      "sentence": "Init gamejolt with _PARAM1_ as Game ID and _PARAM2_ as Game Secret (Auto Login set on _PARAM3_).",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Defines all the functions and try to log-in if embedded on gamejolt and auto login enabled.",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "////////////////////////////////////////////////////////////////////////////////////////////\n//*--------------------------------------------------------------------------------------*//\n//|   ______    ______    __    __    ______          __    ______    __        ______   |//\n//|  /\\  ___\\  /\\  __ \\  /\\ \"-./  \\  /\\  ___\\        /\\ \\  /\\  __ \\  /\\ \\      /\\__  _\\  |//\n//|  \\ \\ \\__ \\ \\ \\  __ \\ \\ \\ \\-./\\ \\ \\ \\  __\\       _\\_\\ \\ \\ \\ \\/\\ \\ \\ \\ \\____ \\/_/\\ \\/  |//\n//|   \\ \\_____\\ \\ \\_\\ \\_\\ \\ \\_\\ \\ \\_\\ \\ \\_____\\    /\\_____\\ \\ \\_____\\ \\ \\_____\\   \\ \\_\\  |//\n//|    \\/_____/  \\/_/\\/_/  \\/_/  \\/_/  \\/_____/    \\/_____/  \\/_____/  \\/_____/    \\/_/  |//\n//|                                                                                      |//\n//*--------------------------------------------------------------------------------------*//\n////////////////////////////////////////////////////////////////////////////////////////////\n//*--------------------------------------------------------------------------------------*//\n//| Game Jolt API JS Library v0.4a (http://gamejolt.com)                                 |//\n//*--------------------------------------------------------------------------------------*//\n//| Special Thanks to:                                                                   |//\n//|                                                                                      |//\n//| David \"CROS\" DeCarmine, Bruno Assarisse, Jani \"JNyknn\" Nykänen,                      |//\n//| Travis \"Clonze\" Miller, Garden Variety                                               |//\n//*--------------------------------------------------------------------------------------*//\n//| Copyright (c) 2014-2015 Martin Mauersics                                             |//\n//|                                                                                      |//\n//| This software is provided 'as-is', without any express or implied                    |//\n//| warranty. In no event will the authors be held liable for any damages                |//\n//| arising from the use of this software.                                               |//\n//|                                                                                      |//\n//| Permission is granted to anyone to use this software for any purpose,                |//\n//| including commercial applications, and to alter it and redistribute it               |//\n//| freely, subject to the following restrictions:                                       |//\n//|                                                                                      |//\n//|   1. The origin of this software must not be misrepresented; you must not            |//\n//|   claim that you wrote the original software. If you use this software               |//\n//|   in a product, an acknowledgment in the product documentation would be              |//\n//|   appreciated but is not required.                                                   |//\n//|                                                                                      |//\n//|   2. Altered source versions must be plainly marked as such, and must not be         |//\n//|   misrepresented as being the original software.                                     |//\n//|                                                                                      |//\n//|   3. This notice may not be removed or altered from any source                       |//\n//|   distribution.                                                                      |//\n//|                                                                                      |//\n//|   4. This software may only be used within the terms of Game Jolt.                   |//\n//|   (http://gamejolt.com/terms/)                                                       |//\n//*--------------------------------------------------------------------------------------*//\n////////////////////////////////////////////////////////////////////////////////////////////\n//*--------------------------------------------------------------------------------------*//\n//|   This is a \"fork\" for gdevelop.                                                     |//\n//|   The part with the javascript communication with the api is from Martin Mauersics   |//\n//|   The part with the communication between javascript and gdevelop is from            |//\n//|   Arthur Pacaud (me).                                                                |//\n//*--------------------------------------------------------------------------------------*//\n////////////////////////////////////////////////////////////////////////////////////////////\n\"use strict\";\nwindow.GJAPI = {};\n\n// TODO: add login-check + error-msg on user-data-store operations without current user ?\n\n\n// ****************************************************************\n// configuration attributes\nvar DEBUG = false;\n\nif (DEBUG){\n    console.log(eventsFunctionContext.getArgument(\"GameID\"));\n    console.log(eventsFunctionContext.getArgument(\"ApiKey\"))\n}\n\nGJAPI.iGameID    = eventsFunctionContext.getArgument(\"GameID\");\nGJAPI.sGameKey   = eventsFunctionContext.getArgument(\"ApiKey\");\nif (eventsFunctionContext.getArgument(\"AutoLogin\") == 0) {\n    GJAPI.bAutoLogin = true;   // automatically log in users on Game Jolt\n} else {\n    GJAPI.bAutoLogin = false;   // do not automatically log in users on Game Jolt\n}\nif(GJAPI.iGameID === 0 || GJAPI.sGameKey === \"\") alert(\"Game ID or Game Key missing!\");\n\nGJAPI.sAPI      = \"http://gamejolt.com/api/game/v1\";\nGJAPI.sLogName  = \"[Game Jolt API]\";\nGJAPI.iLogStack = 20;\n\n\n// ****************************************************************\n// utility functions\nGJAPI.asQueryParam = function()\n{\n    var asOutput = {};\n    var asList   = window.location.search.substring(1).split(\"&\");\n\n    // loop through all parameters\n    for(var i = 0; i < asList.length; ++i)\n    {\n        // separate key from value\n        var asPair = asList[i].split(\"=\");\n\n        // insert value into map\n        if(typeof asOutput[asPair[0]] === \"undefined\")\n            asOutput[asPair[0]] = asPair[1];                          // create new entry\n        else if(typeof asOutput[asPair[0]] === \"string\")\n            asOutput[asPair[0]] = [asOutput[asPair[0]], asPair[1]];   // extend into array\n        else\n            asOutput[asPair[0]].push(asPair[1]);                      // append to array\n    }\n\n    return asOutput;\n}();\n\nGJAPI.bOnGJ = window.location.hostname.match(/gamejolt/) ? true : false;\n\nGJAPI.LogTrace = function(sMessage)\n{\n    // prevent flooding\n    if(!(  GJAPI.iLogStack)) return;\n    if(!(--GJAPI.iLogStack)) sMessage = \"(╯°□°）╯︵ ┻━┻\";\n    \n    // log message and stack trace\n    console.warn(GJAPI.sLogName + \" \" + sMessage);\n    console.trace();\n};\n\n\n// ****************************************************************\n// main functions\nGJAPI.SEND_USER    = true;\nGJAPI.SEND_GENERAL = false;\n\nGJAPI.SendRequest = function(sURL, bSendUser, pCallback)\n{\n    // forward call to extended function\n    GJAPI.SendRequestEx(sURL, bSendUser, \"json\", \"\", pCallback);\n}\n\nGJAPI.SendRequestEx = function(sURL, bSendUser, sFormat, sBodyData, pCallback)\n{\n    // add main URL, game ID and format type\n    sURL = GJAPI.sAPI + encodeURI(sURL)              +\n           ((sURL.indexOf(\"/?\") === -1) ? '?' : '&') +\n           \"game_id=\" + GJAPI.iGameID                +\n           \"&format=\" + sFormat;\n\n    // add credentials of current user (for user-related operations)\n    if(GJAPI.bActive && (bSendUser === GJAPI.SEND_USER))\n    {\n        sURL += \"&username=\"   + GJAPI.sUserName +\n                \"&user_token=\" + GJAPI.sUserToken\n    }\n\n    // generate MD5 signature\n    sURL += \"&signature=\" + hex_md5(sURL + GJAPI.sGameKey);\n\n    // send off the request\n    __CreateAjax(sURL, sBodyData, function(sResponse)\n    {\n        console.info(GJAPI.sLogName + \" <\" + sURL + \"> \" + sResponse);\n        if((sResponse === \"\") || (typeof pCallback !== \"function\")) return;\n\n        switch(sFormat) \n        {\n        case \"json\":\n            pCallback(eval(\"(\" + sResponse + \")\").response);\n            break;\n            \n        case \"dump\":\n            var iLineBreakIndex = sResponse.indexOf(\"\\n\");\n            var sResult = sResponse.substr(0, iLineBreakIndex - 1);\n            var sData   = sResponse.substr(iLineBreakIndex + 1);\n        \n            pCallback\n            ({\n                success: sResult === \"SUCCESS\",\n                data:    sData\n            });\n            break;\n        \n        default:\n            pCallback(sResponse);\n            break;\n        }\n    });\n};\n// automatically retrieve and log in current user on Game Jolt \nGJAPI.bActive    = (GJAPI.bAutoLogin && GJAPI.asQueryParam[\"gjapi_username\"] && GJAPI.asQueryParam[\"gjapi_token\"]) ? true : false;\nGJAPI.sUserName  = GJAPI.bActive ? GJAPI.asQueryParam[\"gjapi_username\"] : \"\";\nGJAPI.sUserToken = GJAPI.bActive ? GJAPI.asQueryParam[\"gjapi_token\"]    : \"\";\n\n// send some information to the console\nconsole.info(GJAPI.asQueryParam);\nconsole.info(GJAPI.sLogName + (GJAPI.bOnGJ   ? \" E\" : \" Not e\") + \"mbedded on Game Jolt <\" + window.location.origin + window.location.pathname + \">\");\nconsole.info(GJAPI.sLogName + (GJAPI.bActive ? \" U\" : \" No u\")  + \"ser recognized <\"       + GJAPI.sUserName + \">\");\nif(!window.location.hostname) console.warn(GJAPI.sLogName + \" XMLHttpRequest may not work properly on a local environment\");\n\n\n// ****************************************************************\n// session functions\nGJAPI.bSessionActive = true;\n\nGJAPI.SessionOpen = function()\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"SessionOpen() failed: no user logged in\"); return;}\n    \n    // check for already open session\n    if(GJAPI.iSessionHandle) return;\n\n    // send open-session request\n    GJAPI.SendRequest(\"/sessions/open/\", GJAPI.SEND_USER,\n    function(pResponse)\n    {\n        // check for success\n        if(pResponse.success)\n        {\n            // add automatic session ping and close\n            GJAPI.iSessionHandle = window.setInterval(GJAPI.SessionPing, 30000);\n            window.addEventListener(\"beforeunload\", GJAPI.SessionClose, false);\n        }\n    });\n};\n\nGJAPI.SessionPing = function()\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"SessionPing() failed: no user logged in\"); return;}\n\n    // send ping-session request\n    GJAPI.SendRequest(\"/sessions/ping/?status=\" + (GJAPI.bSessionActive ? \"active\" : \"idle\"), GJAPI.SEND_USER);\n};\n\nGJAPI.SessionClose = function()\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"SessionClose() failed: no user logged in\"); return;}\n\n    if(GJAPI.iSessionHandle)\n    {\n        // remove automatic session ping and close\n        window.clearInterval(GJAPI.iSessionHandle);\n        window.removeEventListener(\"beforeunload\", GJAPI.SessionClose);\n        \n        GJAPI.iSessionHandle = 0;\n    }\n    \n    // send close-session request\n    GJAPI.SendRequest(\"/sessions/close/\", GJAPI.SEND_USER);\n};\n\n// automatically start player session\nif(GJAPI.bActive) GJAPI.SessionOpen();\n\n// ****************************************************************\n// user functions\nGJAPI.UserLoginManual = function(sUserName, sUserToken, pCallback)\n{\n    if(GJAPI.bActive) {GJAPI.LogTrace(\"UserLoginManual(\" + sUserName + \", \" + sUserToken + \") failed: user \" + GJAPI.sUserName + \" already logged in\"); return;}\n\n    // send authentication request\n    GJAPI.SendRequest(\"/users/auth/\"             +\n                      \"?username=\"   + sUserName +\n                      \"&user_token=\" + sUserToken,\n                      GJAPI.SEND_GENERAL,\n    function(pResponse)\n    {\n        // check for success\n        if(pResponse.success)\n        {\n            // save login properties\n            GJAPI.bActive    = true;\n            GJAPI.sUserName  = sUserName;\n            GJAPI.sUserToken = sUserToken;\n            \n            // open session\n            GJAPI.SessionOpen();\n        }\n        \n        // execute nested callback\n        if(typeof pCallback === \"function\")\n            pCallback(pResponse);\n    },\n    false);\n};\n\nGJAPI.UserLogout = function()\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"UserLogout() failed: no user logged in\"); return;}\n    \n    // close session\n    GJAPI.SessionClose();\n    \n    // reset login properties\n    GJAPI.bActive    = false;\n    GJAPI.sUserName  = \"\";\n    GJAPI.sUserToken = \"\";\n    \n    // reset trophy cache\n    GJAPI.abTrophyCache = {};\n};\n\nGJAPI.UserFetchID = function(iUserID, pCallback)\n{\n    // send fetch-user request\n    GJAPI.SendRequest(\"/users/?user_id=\" + iUserID, GJAPI.SEND_GENERAL, pCallback);\n};\n\nGJAPI.UserFetchName = function(sUserName, pCallback)\n{\n    // send fetch-user request\n    GJAPI.SendRequest(\"/users/?username=\" + sUserName, GJAPI.SEND_GENERAL, pCallback);\n};\n\nGJAPI.UserFetchCurrent = function(pCallback)\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"UserFetchCurrent() failed: no user logged in\"); return;}\n\n    // send fetch-user request\n    GJAPI.UserFetchName(GJAPI.sUserName, pCallback);\n};\n\n\n// ****************************************************************\n// trophy functions\nGJAPI.abTrophyCache = {};\n\nGJAPI.TROPHY_ONLY_ACHIEVED    =  1;\nGJAPI.TROPHY_ONLY_NOTACHIEVED = -1;\nGJAPI.TROPHY_ALL              =  0;\n\nGJAPI.TrophyAchieve = function(iTrophyID, pCallback)\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"TrophyAchieve(\" + iTrophyID + \") failed: no user logged in\"); return;}\n\n    // check for already achieved trophy\n    if(GJAPI.abTrophyCache[iTrophyID]) return;\n\n    // send achieve-trophy request\n    GJAPI.SendRequest(\"/trophies/add-achieved/?trophy_id=\" + iTrophyID, GJAPI.SEND_USER,\n    function(pResponse)\n    {\n        // check for success\n        if(pResponse.success)\n        {\n            // save status\n            GJAPI.abTrophyCache[iTrophyID] = true;\n        }\n        \n        // execute nested callback\n        if(typeof pCallback === \"function\") \n            pCallback(pResponse);\n    });\n};\n\nGJAPI.TrophyFetch = function(iAchieved, pCallback)\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"TrophyFetch(\" + iAchieved + \") failed: no user logged in\"); return;}\n\n    // only trophies with the requested status\n    var sTrophyData = (iAchieved === GJAPI.TROPHY_ALL) ? \"\" :\n                      \"?achieved=\" + ((iAchieved >= GJAPI.TROPHY_ONLY_ACHIEVED) ? \"true\" : \"false\");\n\n    // send fetch-trophy request\n    GJAPI.SendRequest(\"/trophies/\" + sTrophyData, GJAPI.SEND_USER, pCallback);\n};\n\nGJAPI.TrophyFetchSingle = function(iTrophyID, pCallback)\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"TrophyFetchSingle(\" + iTrophyID + \") failed: no user logged in\"); return;}\n\n    // send fetch-trophy request\n    GJAPI.SendRequest(\"/trophies/?trophy_id=\" + iTrophyID, GJAPI.SEND_USER, pCallback);\n};\n\n\n// ****************************************************************\n// score functions\nGJAPI.SCORE_ONLY_USER = true;\nGJAPI.SCORE_ALL       = false;\n\nGJAPI.ScoreAdd = function(iScoreTableID, iScoreValue, sScoreText, sExtraData, pCallback)\n{\n    if(!GJAPI.bActive) {GJAPI.LogTrace(\"ScoreAdd(\" + iScoreTableID + \", \" + iScoreValue + \", \" + sScoreText + \") failed: no user logged in\"); return;}\n\n    // send add-score request\n    GJAPI.ScoreAddGuest(iScoreTableID, iScoreValue, sScoreText, \"\", sExtraData, pCallback);\n};\n\nGJAPI.ScoreAddGuest = function(iScoreTableID, iScoreValue, sScoreText, sGuestName, sExtraData, pCallback)\n{\n    // use current user data or guest name\n    var bIsGuest = (sGuestName && sGuestName.length) ? true : false;\n\n    // send add-score request\n    GJAPI.SendRequest(\"/scores/add/\"                                          +\n                      \"?sort=\"  + iScoreValue                                 +\n                      \"&score=\" + sScoreText                                  +\n                      (bIsGuest      ? (\"&guest=\"      + sGuestName)    : \"\") +\n                      (iScoreTableID ? (\"&table_id=\"   + iScoreTableID) : \"\") +\n                      (sExtraData    ? (\"&extra_data=\" + sExtraData)    : \"\"),\n                      (bIsGuest ? GJAPI.SEND_GENERAL : GJAPI.SEND_USER), pCallback);\n};\n\nGJAPI.ScoreFetch = function(iScoreTableID, bOnlyUser, iLimit, pCallback)\n{\n    if(!GJAPI.bActive && bOnlyUser) {GJAPI.LogTrace(\"ScoreFetch(\" + iScoreTableID + \", \" + bOnlyUser + \", \" + iLimit + \") failed: no user logged in\"); return;}\n\n    // only scores from the current user or all scores\n    var bFetchAll = (bOnlyUser === GJAPI.SCORE_ONLY_USER) ? false : true;\n    \n    // send fetch-score request\n    GJAPI.SendRequest(\"/scores/\"         +\n                      \"?limit=\" + iLimit +\n                      (iScoreTableID ? (\"&table_id=\" + iScoreTableID) : \"\"),\n                      (bFetchAll ? GJAPI.SEND_GENERAL : GJAPI.SEND_USER), pCallback);\n};\n\n\n// ****************************************************************\n// data store functions\nGJAPI.DATA_STORE_USER   = 0;\nGJAPI.DATA_STORE_GLOBAL = 1;\n\nGJAPI.DataStoreSet = function(iStore, sKey, sData, pCallback)\n{\n    // send set-data request\n    GJAPI.SendRequestEx(\"/data-store/set/?key=\" + sKey, (iStore === GJAPI.DATA_STORE_USER), \"json\", \"data=\" + sData, pCallback);\n};\n\nGJAPI.DataStoreFetch = function(iStore, sKey, pCallback)\n{\n    // send fetch-data request\n    GJAPI.SendRequestEx(\"/data-store/?key=\" + sKey, (iStore === GJAPI.DATA_STORE_USER), \"dump\", \"\", pCallback);\n};\n\nGJAPI.DataStoreUpdate = function(iStore, sKey, sOperation, sValue, pCallback)\n{\n    // send update-data request\n    GJAPI.SendRequest(\"/data-store/update/\"      +\n                      \"?key=\"       + sKey       +\n                      \"&operation=\" + sOperation +\n                      \"&value=\"     + sValue, \n                      (iStore === GJAPI.DATA_STORE_USER), pCallback);\n};\n\nGJAPI.DataStoreRemove = function(iStore, sKey, pCallback)\n{\n    // send remove-data request\n    GJAPI.SendRequest(\"/data-store/remove/?key=\" + sKey, (iStore === GJAPI.DATA_STORE_USER), pCallback);\n};\n\nGJAPI.DataStoreGetKeys = function(iStore, pCallback)\n{\n    // send get-keys request\n    GJAPI.SendRequest(\"/data-store/get-keys/\", (iStore === GJAPI.DATA_STORE_USER), pCallback);\n};\n\n// ****************************************************************\n// create asynchronous request\nfunction __CreateAjax(sUrl, sBodyData, pCallback)\n{\n    if(typeof sBodyData !== \"string\") sBodyData = \"\";\n    \n    if(window.XMLHttpRequest)\n    {\n        var pRequest = new XMLHttpRequest();\n\n        // bind callback function\n        pRequest.onreadystatechange = function()\n        {\n            if(pRequest.readyState === 4)\n                pCallback(pRequest.responseText);\n        };\n\n        // send off the request\n        if(sBodyData !== \"\")\n        {\n            pRequest.open(\"POST\", sUrl);\n            pRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            pRequest.send(sBodyData);\n        }\n        else\n        {\n            pRequest.open(\"GET\", sUrl);\n            pRequest.send();\n        }\n    }\n    else console.error(GJAPI.sLogName + \" XMLHttpRequest not supported\");\n}\n\n\n/*\n* A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n* Digest Algorithm, as defined in RFC 1321.\n* Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n* Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n* Distributed under the BSD License\n* See http://pajhome.org.uk/crypt/md5 for more info.\n*/\nvar hexcase=0;function hex_md5(a){return rstr2hex(rstr_md5(str2rstr_utf8(a)))}function hex_hmac_md5(a,b){return rstr2hex(rstr_hmac_md5(str2rstr_utf8(a),str2rstr_utf8(b)))}function md5_vm_test(){return hex_md5(\"abc\").toLowerCase()==\"900150983cd24fb0d6963f7d28e17f72\"}function rstr_md5(a){return binl2rstr(binl_md5(rstr2binl(a),a.length*8))}function rstr_hmac_md5(c,f){var e=rstr2binl(c);if(e.length>16){e=binl_md5(e,c.length*8)}var a=Array(16),d=Array(16);for(var b=0;b<16;b++){a[b]=e[b]^909522486;d[b]=e[b]^1549556828}var g=binl_md5(a.concat(rstr2binl(f)),512+f.length*8);return binl2rstr(binl_md5(d.concat(g),512+128))}function rstr2hex(c){try{hexcase}catch(g){hexcase=0}var f=hexcase?\"0123456789ABCDEF\":\"0123456789abcdef\";var b=\"\";var a;for(var d=0;d<c.length;d++){a=c.charCodeAt(d);b+=f.charAt((a>>>4)&15)+f.charAt(a&15)}return b}function str2rstr_utf8(c){var b=\"\";var d=-1;var a,e;while(++d<c.length){a=c.charCodeAt(d);e=d+1<c.length?c.charCodeAt(d+1):0;if(55296<=a&&a<=56319&&56320<=e&&e<=57343){a=65536+((a&1023)<<10)+(e&1023);d++}if(a<=127){b+=String.fromCharCode(a)}else{if(a<=2047){b+=String.fromCharCode(192|((a>>>6)&31),128|(a&63))}else{if(a<=65535){b+=String.fromCharCode(224|((a>>>12)&15),128|((a>>>6)&63),128|(a&63))}else{if(a<=2097151){b+=String.fromCharCode(240|((a>>>18)&7),128|((a>>>12)&63),128|((a>>>6)&63),128|(a&63))}}}}}return b}function rstr2binl(b){var a=Array(b.length>>2);for(var c=0;c<a.length;c++){a[c]=0}for(var c=0;c<b.length*8;c+=8){a[c>>5]|=(b.charCodeAt(c/8)&255)<<(c%32)}return a}function binl2rstr(b){var a=\"\";for(var c=0;c<b.length*32;c+=8){a+=String.fromCharCode((b[c>>5]>>>(c%32))&255)}return a}function binl_md5(p,k){p[k>>5]|=128<<((k)%32);p[(((k+64)>>>9)<<4)+14]=k;var o=1732584193;var n=-271733879;var m=-1732584194;var l=271733878;for(var g=0;g<p.length;g+=16){var j=o;var h=n;var f=m;var e=l;o=md5_ff(o,n,m,l,p[g+0],7,-680876936);l=md5_ff(l,o,n,m,p[g+1],12,-389564586);m=md5_ff(m,l,o,n,p[g+2],17,606105819);n=md5_ff(n,m,l,o,p[g+3],22,-1044525330);o=md5_ff(o,n,m,l,p[g+4],7,-176418897);l=md5_ff(l,o,n,m,p[g+5],12,1200080426);m=md5_ff(m,l,o,n,p[g+6],17,-1473231341);n=md5_ff(n,m,l,o,p[g+7],22,-45705983);o=md5_ff(o,n,m,l,p[g+8],7,1770035416);l=md5_ff(l,o,n,m,p[g+9],12,-1958414417);m=md5_ff(m,l,o,n,p[g+10],17,-42063);n=md5_ff(n,m,l,o,p[g+11],22,-1990404162);o=md5_ff(o,n,m,l,p[g+12],7,1804603682);l=md5_ff(l,o,n,m,p[g+13],12,-40341101);m=md5_ff(m,l,o,n,p[g+14],17,-1502002290);n=md5_ff(n,m,l,o,p[g+15],22,1236535329);o=md5_gg(o,n,m,l,p[g+1],5,-165796510);l=md5_gg(l,o,n,m,p[g+6],9,-1069501632);m=md5_gg(m,l,o,n,p[g+11],14,643717713);n=md5_gg(n,m,l,o,p[g+0],20,-373897302);o=md5_gg(o,n,m,l,p[g+5],5,-701558691);l=md5_gg(l,o,n,m,p[g+10],9,38016083);m=md5_gg(m,l,o,n,p[g+15],14,-660478335);n=md5_gg(n,m,l,o,p[g+4],20,-405537848);o=md5_gg(o,n,m,l,p[g+9],5,568446438);l=md5_gg(l,o,n,m,p[g+14],9,-1019803690);m=md5_gg(m,l,o,n,p[g+3],14,-187363961);n=md5_gg(n,m,l,o,p[g+8],20,1163531501);o=md5_gg(o,n,m,l,p[g+13],5,-1444681467);l=md5_gg(l,o,n,m,p[g+2],9,-51403784);m=md5_gg(m,l,o,n,p[g+7],14,1735328473);n=md5_gg(n,m,l,o,p[g+12],20,-1926607734);o=md5_hh(o,n,m,l,p[g+5],4,-378558);l=md5_hh(l,o,n,m,p[g+8],11,-2022574463);m=md5_hh(m,l,o,n,p[g+11],16,1839030562);n=md5_hh(n,m,l,o,p[g+14],23,-35309556);o=md5_hh(o,n,m,l,p[g+1],4,-1530992060);l=md5_hh(l,o,n,m,p[g+4],11,1272893353);m=md5_hh(m,l,o,n,p[g+7],16,-155497632);n=md5_hh(n,m,l,o,p[g+10],23,-1094730640);o=md5_hh(o,n,m,l,p[g+13],4,681279174);l=md5_hh(l,o,n,m,p[g+0],11,-358537222);m=md5_hh(m,l,o,n,p[g+3],16,-722521979);n=md5_hh(n,m,l,o,p[g+6],23,76029189);o=md5_hh(o,n,m,l,p[g+9],4,-640364487);l=md5_hh(l,o,n,m,p[g+12],11,-421815835);m=md5_hh(m,l,o,n,p[g+15],16,530742520);n=md5_hh(n,m,l,o,p[g+2],23,-995338651);o=md5_ii(o,n,m,l,p[g+0],6,-198630844);l=md5_ii(l,o,n,m,p[g+7],10,1126891415);m=md5_ii(m,l,o,n,p[g+14],15,-1416354905);n=md5_ii(n,m,l,o,p[g+5],21,-57434055);o=md5_ii(o,n,m,l,p[g+12],6,1700485571);l=md5_ii(l,o,n,m,p[g+3],10,-1894986606);m=md5_ii(m,l,o,n,p[g+10],15,-1051523);n=md5_ii(n,m,l,o,p[g+1],21,-2054922799);o=md5_ii(o,n,m,l,p[g+8],6,1873313359);l=md5_ii(l,o,n,m,p[g+15],10,-30611744);m=md5_ii(m,l,o,n,p[g+6],15,-1560198380);n=md5_ii(n,m,l,o,p[g+13],21,1309151649);o=md5_ii(o,n,m,l,p[g+4],6,-145523070);l=md5_ii(l,o,n,m,p[g+11],10,-1120210379);m=md5_ii(m,l,o,n,p[g+2],15,718787259);n=md5_ii(n,m,l,o,p[g+9],21,-343485551);o=safe_add(o,j);n=safe_add(n,h);m=safe_add(m,f);l=safe_add(l,e)}return Array(o,n,m,l)}function md5_cmn(h,e,d,c,g,f){return safe_add(bit_rol(safe_add(safe_add(e,h),safe_add(c,f)),g),d)}function md5_ff(g,f,k,j,e,i,h){return md5_cmn((f&k)|((~f)&j),g,f,e,i,h)}function md5_gg(g,f,k,j,e,i,h){return md5_cmn((f&j)|(k&(~j)),g,f,e,i,h)}function md5_hh(g,f,k,j,e,i,h){return md5_cmn(f^k^j,g,f,e,i,h)}function md5_ii(g,f,k,j,e,i,h){return md5_cmn(k^(f|(~j)),g,f,e,i,h)}function safe_add(a,d){var c=(a&65535)+(d&65535);var b=(a>>16)+(d>>16)+(c>>16);return(b<<16)|(c&65535)}function bit_rol(a,b){return(a<<b)|(a>>>(32-b))};\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The Game ID",
          "longDescription": "",
          "name": "GameID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The secret for comunication with the api.",
          "longDescription": "",
          "name": "ApiKey",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter 0 to enable Auto Login (Works only if embedded on Gamejolt). Else enter any number.",
          "longDescription": "",
          "name": "AutoLogin",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns 0 if not logged in, returns 1 if logged in. Not 100% trustworthy.",
      "fullName": "Is Logged in?",
      "functionType": "Expression",
      "name": "IsLoggedIn",
      "private": false,
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "if (GJAPI.bActive) {\n    eventsFunctionContext.returnValue = 1;\n} else{\n    eventsFunctionContext.returnValue = 0;\n};",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "If the game is not embedded on gamejolt, use this to log in manually using the username and Game Token.",
      "fullName": "Login Manually",
      "functionType": "Action",
      "name": "ManualUserLogin",
      "private": false,
      "sentence": "Manual login into Gamejolt with Username _PARAM1_ and Token _PARAM2_ .",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Log in with provided credentials.",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var sUsername = eventsFunctionContext.getArgument(\"Username\")\nvar sToken = eventsFunctionContext.getArgument(\"GameToken\")\nGJAPI.UserLoginManual(sUsername, sToken, function(pResponse)\n{\n    if(pResponse.success) {\n        console.info(\"Login successful\");\n        runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"Success\")).setNumber(1);\n        \n    } else {\n        console.info(\"Login NOT successful\");\n        runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"Success\")).setNumber(0);\n    };\n});",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Username",
          "longDescription": "",
          "name": "Username",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Game Token",
          "longDescription": "",
          "name": "GameToken",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Variable to store 1 if successful and 0 if unsuccessful.",
          "longDescription": "",
          "name": "Success",
          "optional": false,
          "supplementaryInformation": "",
          "type": "sceneName"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Log out of the current Gamejolt session.",
      "fullName": "Log out",
      "functionType": "Action",
      "name": "Logout",
      "private": false,
      "sentence": "Log Out of Gamejolt.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Logout of Gamejolt account",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserLogout()",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user logged in.",
      "fullName": "Get Logged In User Data ",
      "functionType": "Action",
      "name": "GetLoggedInUserData",
      "private": false,
      "sentence": "Get the current User's Data and store the result in _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Local User Data",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchCurrent(\n    function(pResponse){\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "JSONToVariableStructure"
              },
              "parameters": [
                "VariableString(vResult)",
                "get()"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user logged in.",
      "fullName": "Get Logged In User Data as JSON",
      "functionType": "Action",
      "name": "GetLoggedInUserDataJSON",
      "private": false,
      "sentence": "Get the current User's Data and store the result as JSON in _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Local User Data",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchCurrent(\n    function(pResponse) {\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(pResponse.users[0].toString());\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user Specified.",
      "fullName": "Get a Specific User's Data",
      "functionType": "Action",
      "name": "GetCustomUserDataByID",
      "private": false,
      "sentence": "Get the Data from user with ID _PARAM2_ and store the result in _PARAM2_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Local User Data",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchID(\n    eventsFunctionContext.getArgument(\"UserID\"),\n    function(pResponse) {\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "JSONToVariableStructure"
              },
              "parameters": [
                "VariableString(vResult)",
                "get()"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "User ID of the user to get data from.",
          "longDescription": "",
          "name": "UserID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user logged in.",
      "fullName": "Get Logged In User Data as JSON",
      "functionType": "Action",
      "name": "GetCustomUserDataByIDJSON",
      "private": false,
      "sentence": "Get the Data from user with ID _PARAM2_ and store the result as JSON in _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Local User Data",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchID(\n    eventsFunctionContext.getArgument(\"UserID\"),\n    function(pResponse) {\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(pResponse.users[0].toString());\n        };\n    }\n);\n\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "User ID of the user to get data from.",
          "longDescription": "",
          "name": "UserID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user Specified.",
      "fullName": "Get a Specific User's Data",
      "functionType": "Action",
      "name": "GetCustomUserDataByName",
      "private": false,
      "sentence": "Get _PARAM2_'s Data and store the result in _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Local User Data",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchName(\n    eventsFunctionContext.getArgument(\"Username\"),\n    function(pResponse) {\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse.users),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "JSONToVariableStructure"
              },
              "parameters": [
                "VariableString(vResult)",
                "get()"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Username of the user to get data from.",
          "longDescription": "",
          "name": "Username",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the data of the user logged in.",
      "fullName": "Get Logged In User Data as JSON",
      "functionType": "Action",
      "name": "GetCustomUserDataByNameJSON",
      "private": false,
      "sentence": "Get _PARAM2_'s Data and store the result as JSON in _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get User Data By name and return as JSON",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.UserFetchName(\n    eventsFunctionContext.getArgument(\"Username\"),\n    function(pResponse) {\n        if(!pResponse.users) return 0; else {\n            console.info(pResponse.users[0].username + \" - \" + pResponse.users[0].developer_description);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(pResponse.users[0].toString());\n        };\n    }\n);\n\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Username of the user to get data from.",
          "longDescription": "",
          "name": "Username",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Archieve a gamejolt trophie by it's ID. To get a trophy ID create one on your game page/Game API/trophies.",
      "fullName": "Archieve Gamejolt Trophy",
      "functionType": "Action",
      "name": "ArchieveTrophy",
      "private": false,
      "sentence": "Make the player archieve the trophy with id _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.TrophyAchieve(eventsFunctionContext.getArgument(\"trophyID\"));\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "ID of the trophy.",
          "longDescription": "",
          "name": "trophyID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get a list of trophies (list ids: -1 for list of non-archieved trophies, 1 for list of archieved trophies, and 0 for all trophies). Stores them as a JSON String.",
      "fullName": "Get the list of trophies as JSON",
      "functionType": "Action",
      "name": "GetTrophiesListJSON",
      "private": false,
      "sentence": "Get the list with ID _PARAM2_ and store result in variable with name _PARAM1_ as JSON.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Trophies List and return as JSON",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.TrophyFetch(\n    eventsFunctionContext.getArgument(\"ListID\"),\n    function(pResponse) {\n        if(!pResponse.trophies) return 0; else {\n            console.info(pResponse.trophies);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(pResponse.trophies);\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The List ID.",
          "longDescription": "",
          "name": "ListID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get a list of trophies (list ids: -1 for list of non-archieved trophies, 1 for list of archieved trophies, and 0 for all trophies).",
      "fullName": "Get the list of trophies",
      "functionType": "Action",
      "name": "GetTrophiesList",
      "private": false,
      "sentence": "Get the list with ID _PARAM2_ and store result in variable with name _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Trophies List and store to a stuct",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.TrophyFetch(\n    eventsFunctionContext.getArgument(\"ListID\"),\n    function(pResponse) {\n        if(!pResponse.trophies) return 0; else {\n            console.info(pResponse.trophies);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse.trophies),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The List ID.",
          "longDescription": "",
          "name": "ListID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the infos from a trophy by it's ID and store them as JSON.",
      "fullName": "Get A trophy's infos as JSON.",
      "functionType": "Action",
      "name": "GetTrophyJSON",
      "private": false,
      "sentence": "Get the infos of trophy with ID _PARAM2_ and store result in variable with name _PARAM1_ as JSON.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Trophy info and store as JSON",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.TrophyFetchSingle(\n    eventsFunctionContext.getArgument(\"TrophyID\"),\n    function(pResponse) {\n        if(!pResponse.trophies) return 0; else {\n            console.info(pResponse.trophies);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(pResponse.trophies)\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The Trophy ID.",
          "longDescription": "",
          "name": "TrophyID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get the infos from a trophy by it's ID.",
      "fullName": "Get A trophy's infos.",
      "functionType": "Action",
      "name": "GetTrophy",
      "private": false,
      "sentence": "Get the infos of trophy with ID _PARAM2_ and store result in variable with name _PARAM1_.",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get Trophy info and store to a stuct",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.TrophyFetchSingle(\n    eventsFunctionContext.getArgument(\"TrophyID\"),\n    function(pResponse) {\n        if(!pResponse.trophies) return 0; else {\n            console.info(pResponse.trophies);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse.trophies),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the Variable where the result will be stored.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The Trophy ID.",
          "longDescription": "",
          "name": "TrophyID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Add a score to a scoreboard",
      "fullName": "Add a score to scoreboard",
      "functionType": "Action",
      "name": "SubmitScore",
      "private": false,
      "sentence": "Add the score _PARAM2_ represented as _PARAM3_ to Scoreboard with ID _PARAM1_ and add _PARAM4_ as extra data",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Submit a score to scoreboard.",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.ScoreAdd(\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    eventsFunctionContext.getArgument(\"score\"),\n    eventsFunctionContext.getArgument(\"scoreString\"),\n    eventsFunctionContext.getArgument(\"optionalData\")\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "ID of the scoreboard",
          "longDescription": "",
          "name": "scoreboardID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The score to add",
          "longDescription": "",
          "name": "score",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "String representing the score (Example: \"22 points\" or \"56 apples\")",
          "longDescription": "",
          "name": "scoreString",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "(optional) Extra data to associate with this score.",
          "longDescription": "",
          "name": "optionalData",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Add a score to a scoreboard without loging in.",
      "fullName": "Add a score to scoreboard as Guest",
      "functionType": "Action",
      "name": "SubmitScoreGuest",
      "private": false,
      "sentence": "Add the score _PARAM2_ represented as _PARAM3_ to Scoreboard with ID _PARAM1_ and add _PARAM4_ as extra data as Guest with name _PARAM5_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Submit a score to scoreboard.",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "GJAPI.ScoreAddGuest(\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    eventsFunctionContext.getArgument(\"score\"),\n    eventsFunctionContext.getArgument(\"scoreString\"),\n    eventsFunctionContext.getArgument(\"name\"),\n    eventsFunctionContext.getArgument(\"optionalData\")\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "ID of the scoreboard",
          "longDescription": "",
          "name": "scoreboardID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The score to add",
          "longDescription": "",
          "name": "score",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "String representing the score (Example: \"22 points\" or \"56 apples\")",
          "longDescription": "",
          "name": "scoreString",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "(optional) Extra data to associate with this score.",
          "longDescription": "",
          "name": "optionalData",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Guest name",
          "longDescription": "",
          "name": "name",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get a list of scores from a scoreboard",
      "fullName": "Get Scores from Scoreboard",
      "functionType": "Action",
      "name": "GetScores",
      "private": false,
      "sentence": "Get a list of scores from the scoreboard with id _PARAM1_, with a limit of _PARAM2_ and store into _PARAM4_ (User Only: _PARAM3_).",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get scores from scoreboard",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "if (eventsFunctionContext.getArgument(\"userOnly\") === 1){\n    let uO = true;\n}else{\n    let uO = false;\n}\n\nGJAPI.ScoreFetch(\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    uO,\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    function(pResponse) {\n        if(!pResponse.scores) return 0; else {\n            console.info(pResponse.scores);\n            if(!gdjs.evtTools.network){\n                alert(\"Network Extension Not Present!\")\n            }\n            gdjs.evtTools.network.jsonToVariableStructure(\n                JSON.stringify(pResponse.scores),\n                runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\"))\n            )\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "ID of the scoreboard",
          "longDescription": "",
          "name": "scoreboardID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Maximum of scores to get.",
          "longDescription": "",
          "name": "limit",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Set to 1 to have only scores from this user.",
          "longDescription": "",
          "name": "userOnly",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the variable where to store the result",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get a list of scores from a scoreboard",
      "fullName": "Get Scores from Scoreboard",
      "functionType": "Action",
      "name": "GetScoresJson",
      "private": false,
      "sentence": "Get a list of scores from the scoreboard with id _PARAM1_, with a limit of _PARAM2_ and store into _PARAM4_ (User Only: _PARAM3_) as JSON",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Get scores from scoreboard",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "if (eventsFunctionContext.getArgument(\"userOnly\") === 1){\n    let uO = true;\n}else{\n    let uO = false;\n}\n\nGJAPI.ScoreFetch(\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    uO,\n    eventsFunctionContext.getArgument(\"scoreboardID\"),\n    function(pResponse) {\n        if(!pResponse.scores) return 0; else {\n            console.info(pResponse.scores);\n            runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"vResult\")).setString(JSON.stringify(pResponse.scores))\n        };\n    }\n);\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "ID of the scoreboard",
          "longDescription": "",
          "name": "scoreboardID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Maximum of scores to get.",
          "longDescription": "",
          "name": "limit",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Set to 1 to have only scores from this user.",
          "longDescription": "",
          "name": "userOnly",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Variable name where to store the result.",
          "longDescription": "",
          "name": "vResult",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}